{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nfunction useFetchMovies(url, transformData = data => data, isObject = false) {\n  _s();\n  const [data, setData] = useState(isObject ? {} : []);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Asegurándonos de que la URL no cambie innecesariamente\n  useEffect(() => {\n    console.log(\"URL changed: \", url); // Para depuración\n  }, [url]);\n\n  // Función para obtener datos de la API\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const result = await response.json();\n      setData(transformData(result));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [url, transformData]);\n\n  // Ejecuta la solicitud solo si la URL cambia\n  useEffect(() => {\n    if (url) {\n      // Asegura que la URL no esté vacía antes de hacer la solicitud\n      fetchData();\n    }\n  }, [url, fetchData]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n_s(useFetchMovies, \"EBkjcBxUm7S2Tp3ghqX478t4g3w=\");\nexport default useFetchMovies;","map":{"version":3,"names":["useState","useEffect","useCallback","useFetchMovies","url","transformData","data","isObject","_s","setData","loading","setLoading","error","setError","console","log","fetchData","response","fetch","ok","Error","statusText","result","json","err","message"],"sources":["/home/marin/streaming-platform/src/hooks/fetchMovies.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nfunction useFetchMovies(url, transformData = data => data, isObject = false) {\n  const [data, setData] = useState(isObject ? {} : []);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Asegurándonos de que la URL no cambie innecesariamente\n  useEffect(() => {\n    console.log(\"URL changed: \", url);  // Para depuración\n  }, [url]);\n\n  // Función para obtener datos de la API\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const result = await response.json();\n      setData(transformData(result));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [url, transformData]);\n\n  // Ejecuta la solicitud solo si la URL cambia\n  useEffect(() => {\n    if (url) {  // Asegura que la URL no esté vacía antes de hacer la solicitud\n      fetchData();\n    }\n  }, [url, fetchData]);\n\n  return { data, loading, error };\n}\n\nexport default useFetchMovies;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,SAASC,cAAcA,CAACC,GAAG,EAAEC,aAAa,GAAGC,IAAI,IAAIA,IAAI,EAAEC,QAAQ,GAAG,KAAK,EAAE;EAAAC,EAAA;EAC3E,MAAM,CAACF,IAAI,EAAEG,OAAO,CAAC,GAAGT,QAAQ,CAACO,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;EACpD,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEX,GAAG,CAAC,CAAC,CAAE;EACtC,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;;EAET;EACA,MAAMY,SAAS,GAAGd,WAAW,CAAC,YAAY;IACxC,IAAI;MACFS,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,CAAC;MACjC,IAAI,CAACa,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,UAAUH,QAAQ,CAACI,UAAU,EAAE,CAAC;MAClD;MACA,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpCd,OAAO,CAACJ,aAAa,CAACiB,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZX,QAAQ,CAACW,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACP,GAAG,EAAEC,aAAa,CAAC,CAAC;;EAExB;EACAJ,SAAS,CAAC,MAAM;IACd,IAAIG,GAAG,EAAE;MAAG;MACVY,SAAS,CAAC,CAAC;IACb;EACF,CAAC,EAAE,CAACZ,GAAG,EAAEY,SAAS,CAAC,CAAC;EAEpB,OAAO;IAAEV,IAAI;IAAEI,OAAO;IAAEE;EAAM,CAAC;AACjC;AAACJ,EAAA,CApCQL,cAAc;AAsCvB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}